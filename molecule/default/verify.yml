# =============================================================================
# molecule/default/verify.yml - Fixed verification with proper Prometheus queries
# =============================================================================

---
# =============================================================================
# Monitoring Server Verification
# =============================================================================
- name: Verify monitoring server components
  hosts: monitoring_server
  become: true
  tasks:
    - name: Check if Prometheus service is running
      systemd:
        name: prometheus
      register: prometheus_service

    - name: Verify Prometheus service is active
      assert:
        that:
          - prometheus_service.status.ActiveState == "active"
          - prometheus_service.status.SubState == "running"
        fail_msg: "Prometheus service is not running properly"
        success_msg: "Prometheus service is active and running"

    - name: Wait for Prometheus HTTP endpoint to be ready
      uri:
        url: "http://localhost:9090/-/ready"
        method: GET
        timeout: 10
      register: prometheus_ready_check
      until: prometheus_ready_check.status == 200
      retries: 30
      delay: 10

    - name: Test Prometheus API - targets endpoint
      uri:
        url: "http://localhost:9090/api/v1/targets"
        method: GET
        timeout: 30
      register: targets_response

    - name: Display detailed Prometheus targets information
      debug:
        msg: |
          Prometheus Targets Debug:
          Active targets: {{ targets_response.json.data.activeTargets | length if targets_response.json.data.activeTargets is defined else 0 }}
          
          Target details:
          {% for target in targets_response.json.data.activeTargets %}
          - URL: {{ target.scrapeUrl }}
            Health: {{ target.health }}
            Last Error: {{ target.lastError if target.lastError else 'None' }}
            Last Scrape: {{ target.lastScrape }}
          {% endfor %}

    - name: Verify Prometheus targets are being scraped
      assert:
        that:
          - targets_response.status == 200
          - targets_response.json.status == "success"
          - targets_response.json.data.activeTargets | length >= 3
        fail_msg: "Not enough active targets found"
        success_msg: "All expected targets are active"

    - name: Check if AlertManager service is running
      systemd:
        name: alertmanager
      register: alertmanager_service

    - name: Verify AlertManager service is active
      assert:
        that:
          - alertmanager_service.status.ActiveState == "active"
          - alertmanager_service.status.SubState == "running"
        fail_msg: "AlertManager service is not running properly"
        success_msg: "AlertManager service is active and running"

    - name: Test AlertManager API
      uri:
        url: "http://localhost:9093/api/v2/status"
        method: GET
        timeout: 30
      register: alertmanager_status
      retries: 10
      delay: 5

    - name: Verify AlertManager is responding
      assert:
        that:
          - alertmanager_status.status == 200
        fail_msg: "AlertManager API not responding"
        success_msg: "AlertManager API is responding"

    - name: Check if Grafana service is running
      systemd:
        name: grafana-server
      register: grafana_service

    - name: Verify Grafana service is active
      assert:
        that:
          - grafana_service.status.ActiveState == "active"
          - grafana_service.status.SubState == "running"
        fail_msg: "Grafana service is not running properly"
        success_msg: "Grafana service is active and running"

    - name: Test Grafana health endpoint
      uri:
        url: "http://localhost:3000/api/health"
        method: GET
        timeout: 30
      register: grafana_health
      retries: 15
      delay: 10

    - name: Verify Grafana is responding
      assert:
        that:
          - grafana_health.status == 200
          - grafana_health.json.database == "ok"
        fail_msg: "Grafana health check failed"
        success_msg: "Grafana is healthy"

    - name: Check node exporter service on monitoring server
      systemd:
        name: node_exporter
      register: node_exporter_service

    - name: Verify node exporter is running
      assert:
        that:
          - node_exporter_service.status.ActiveState == "active"
          - node_exporter_service.status.SubState == "running"
        fail_msg: "Node exporter service is not running"
        success_msg: "Node exporter service is running"

    - name: Test node exporter metrics
      uri:
        url: "http://localhost:9100/metrics"
        method: GET
        return_content: true
      register: node_metrics

    - name: Verify node exporter metrics
      assert:
        that:
          - node_metrics.status == 200
          - "'node_cpu_seconds_total' in node_metrics.content"
          - "'node_memory_MemTotal_bytes' in node_metrics.content"
        fail_msg: "Node exporter metrics not available"
        success_msg: "Node exporter metrics are available"

# =============================================================================
# Database Server Verification
# =============================================================================
- name: Verify database server components  
  hosts: database_server
  become: true
  tasks:
    - name: Populate service facts
      ansible.builtin.service_facts:

    # Check PostgreSQL process is actually running
    - name: Check PostgreSQL process is actually running
      command: pgrep -f "postgres.*main"
      register: postgres_process
      changed_when: false

    - name: Verify PostgreSQL process is running
      assert:
        that:
          - postgres_process.stdout_lines | length > 0
        fail_msg: "PostgreSQL process is not running"
        success_msg: "PostgreSQL process is running"

    - name: Test PostgreSQL connection
      postgresql_ping:
        db: postgres
        login_user: postgres
      become_user: postgres
      register: postgres_connection

    - name: Verify PostgreSQL is accepting connections
      assert:
        that:
          - postgres_connection is not failed
        fail_msg: "Cannot connect to PostgreSQL"
        success_msg: "PostgreSQL is accepting connections"

    # Test sample data exists
    - name: Check if test database exists and has data
      postgresql_query:
        db: testdb
        login_user: postgres
        query: "SELECT count(*) as record_count FROM sample_data"
      become_user: postgres
      register: testdb_data

    - name: Verify test database has sample data
      assert:
        that:
          - testdb_data.query_result[0].record_count > 0
        fail_msg: "Test database has no sample data"
        success_msg: "Test database contains {{ testdb_data.query_result[0].record_count }} records"

    # Check if pgexporter user exists
    - name: Check if pgexporter user exists
      postgresql_query:
        db: postgres
        login_user: postgres
        query: "SELECT 1 FROM pg_user WHERE usename='pgexporter'"
      become_user: postgres
      register: pgexporter_user_exists

    - name: Verify pgexporter user was created
      assert:
        that:
          - pgexporter_user_exists.rowcount == 1
        fail_msg: "pgexporter user was not created"
        success_msg: "pgexporter user exists"

    # Debug pgexporter connectivity step by step
    - name: Test pgexporter basic connection to postgres database
      postgresql_query:
        db: postgres
        login_user: pgexporter
        login_password: "{{ vault_exporter_password }}"
        login_host: localhost
        query: "SELECT 1 as basic_test"
      register: pg_exporter_basic_test
      ignore_errors: true

    - name: Display pgexporter basic connectivity
      debug:
        msg: |
          Basic pgexporter connectivity: {{ 'SUCCESS' if pg_exporter_basic_test is not failed else 'FAILED' }}
          {{ pg_exporter_basic_test.msg if pg_exporter_basic_test is failed else 'Connected successfully' }}

    # Check postgres_exporter service
    - name: Check postgres_exporter service status
      systemd:
        name: postgres_exporter
      register: postgres_exporter_service

    - name: Display postgres_exporter service details
      debug:
        msg: |
          Postgres Exporter Service:
          - Active: {{ postgres_exporter_service.status.ActiveState }}
          - SubState: {{ postgres_exporter_service.status.SubState }}
          - Result: {{ postgres_exporter_service.status.Result }}

    # Check postgres_exporter logs for connection issues
    - name: Get postgres_exporter logs
      command: journalctl -u postgres_exporter --no-pager -n 15
      register: pg_exporter_logs
      changed_when: false

    - name: Display postgres_exporter logs
      debug:
        msg: |
          Recent postgres_exporter logs:
          {{ pg_exporter_logs.stdout_lines | join('\n') }}

    # Test metrics endpoint
    - name: Test postgres_exporter metrics endpoint
      uri:
        url: "http://localhost:9187/metrics"
        method: GET
        timeout: 30
        return_content: true
      register: postgres_metrics
      retries: 3
      delay: 5

    - name: Extract key metrics from postgres_exporter
      set_fact:
        pg_up_value: "{{ postgres_metrics.content | regex_search('pg_up ([0-1])', '\\1') | first | default('unknown') }}"
        pg_version_found: "{{ 'pg_version_info' in postgres_metrics.content }}"
        connection_metrics: "{{ postgres_metrics.content | regex_findall('pg_stat_database_numbackends.*') }}"

    - name: Display postgres_exporter metrics analysis
      debug:
        msg: |
          Postgres Exporter Metrics Status:
          - HTTP Status: {{ postgres_metrics.status }}
          - pg_up value: {{ pg_up_value }}
          - Version info present: {{ pg_version_found }}
          - Connection metrics found: {{ connection_metrics | length }} entries
          
          Connection metrics sample:
          {{ connection_metrics[:3] | join('\n') if connection_metrics else 'None found' }}
          
          Error indicators in metrics:
          {{ postgres_metrics.content | regex_findall('.*error.*|.*Error.*|.*ERROR.*') | join('\n') if postgres_metrics.content | regex_findall('.*error.*|.*Error.*|.*ERROR.*') else 'None found' }}

    # Simple verification - just check if postgres_exporter is working at all
    - name: Verify postgres_exporter basic functionality
      assert:
        that:
          - postgres_metrics.status == 200
          - pg_up_value == "1"
        fail_msg: |
          Postgres_exporter is not working properly:
          - HTTP status: {{ postgres_metrics.status }}
          - pg_up value: {{ pg_up_value }}
          Check the logs above for connection issues.
        success_msg: "Postgres_exporter is connected and working (pg_up=1)"

    # Optional advanced metrics check (don't fail if missing)
    - name: Check for advanced PostgreSQL metrics (optional)
      assert:
        that:
          - connection_metrics | length > 0
        fail_msg: "Advanced PostgreSQL metrics not available - this may be expected with minimal database activity"
        success_msg: "Advanced PostgreSQL metrics are available"
      ignore_errors: true

    # Verify node exporter
    - name: Check node exporter service on database server
      systemd:
        name: node_exporter
      register: db_node_exporter_service

    - name: Verify node exporter is running on database server
      assert:
        that:
          - db_node_exporter_service.status.ActiveState == "active"
          - db_node_exporter_service.status.SubState == "running"
        fail_msg: "Node exporter service is not running on database server"
        success_msg: "Node exporter service is running on database server"

# =============================================================================
# Cross-Server Integration Verification
# =============================================================================
- name: Verify cross-server monitoring integration
  hosts: monitoring_server
  become: true
  tasks:
    - name: Test connectivity to postgres_exporter from monitoring server
      uri:
        url: "http://postgres-server:9187/metrics"
        method: GET
        timeout: 10
        return_content: true
      register: remote_pg_metrics_test
      ignore_errors: true

    - name: Display remote postgres_exporter connectivity
      debug:
        msg: |
          Remote postgres_exporter test: {{ 'SUCCESS' if remote_pg_metrics_test.status == 200 else 'FAILED' }}
          Status: {{ remote_pg_metrics_test.status | default('Connection failed') }}
          {% if remote_pg_metrics_test.status == 200 %}
          Metrics found: {{ 'pg_up' in remote_pg_metrics_test.content }}
          {% endif %}

    # FIXED: Use proper URL query string format for Prometheus API
    - name: Query PostgreSQL metrics from Prometheus
      uri:
        url: "http://localhost:9090/api/v1/query?query=pg_up"
        method: GET
        timeout: 30
        return_content: true
      register: pg_up_query
      retries: 3
      delay: 15

    - name: Display Prometheus PostgreSQL query results
      debug:
        msg: |
          Prometheus pg_up query:
          Status: {{ pg_up_query.json.status if pg_up_query.json is defined else 'Failed' }}
          Results: {{ pg_up_query.json.data.result | length if pg_up_query.json.data.result is defined else 0 }}
          {% if pg_up_query.json.data.result is defined and pg_up_query.json.data.result | length > 0 %}
          Value: {{ pg_up_query.json.data.result[0].value[1] }}
          {% endif %}

    - name: Verify PostgreSQL metrics are being collected (conditional)
      assert:
        that:
          - pg_up_query.status == 200
          - pg_up_query.json.status == "success"
          - pg_up_query.json.data.result | length >= 1
          - pg_up_query.json.data.result[0].value[1] == "1"
        fail_msg: "PostgreSQL metrics not being collected by Prometheus"
        success_msg: "PostgreSQL metrics are being collected successfully"
      when: remote_pg_metrics_test.status == 200

    # FIXED: Use proper URL query string format
    - name: Query node metrics from both servers
      uri:
        url: "http://localhost:9090/api/v1/query?query=up{job=\"node\"}"
        method: GET
        timeout: 30
      register: node_up_query

    - name: Verify node metrics from both servers
      assert:
        that:
          - node_up_query.status == 200
          - node_up_query.json.status == "success"
          - node_up_query.json.data.result | length >= 2
        fail_msg: "Node metrics not being collected from both servers"
        success_msg: "Node metrics are being collected from both servers"

    # FIXED: Use proper URL query string format with URL encoding
    - name: Test specific PostgreSQL database metrics
      uri:
        url: "http://localhost:9090/api/v1/query?query=pg_stat_database_numbackends%7Bdatname%3D%22testdb%22%7D"
        method: GET
        timeout: 30
      register: testdb_metrics

    - name: Verify test database specific metrics
      assert:
        that:
          - testdb_metrics.status == 200
          - testdb_metrics.json.status == "success"
        fail_msg: "Test database metrics not available"
        success_msg: "Test database metrics are available"

    - name: Check alert rules are loaded
      uri:
        url: "http://localhost:9090/api/v1/rules"
        method: GET
        return_content: true
      register: rules_response

    - name: Verify alert rules are configured
      assert:
        that:
          - rules_response.status == 200
          - rules_response.json.status == "success"
          - rules_response.json.data.groups | length >= 1
        fail_msg: "Alert rules not loaded properly"
        success_msg: "Alert rules are loaded and configured"

    - name: Display monitoring stack summary
      debug:
        msg: |
          Monitoring Stack Verification Summary:
          - Prometheus: Running and collecting metrics
          - AlertManager: Running and configured
          - Grafana: Running and healthy
          - PostgreSQL: Running with test database
          - Postgres Exporter: {{ 'Running and exposing metrics' if remote_pg_metrics_test.status == 200 else 'NOT WORKING - check logs above' }}
          - Node Exporters: Running on both servers
          - Cross-server metrics: {{ 'Successfully collected' if remote_pg_metrics_test.status == 200 else 'FAILED - postgres_exporter not accessible' }}
          - Alert rules: Loaded and configured