# =============================================================================
# molecule/default/verify.yml - Enhanced verification with postgres_exporter debugging
# =============================================================================

---
# =============================================================================
# Monitoring Server Verification
# =============================================================================
- name: Verify monitoring server components
  hosts: monitoring_server
  become: true
  tasks:
    - name: Check if Prometheus service is running
      systemd:
        name: prometheus
      register: prometheus_service

    - name: Verify Prometheus service is active
      assert:
        that:
          - prometheus_service.status.ActiveState == "active"
          - prometheus_service.status.SubState == "running"
        fail_msg: "Prometheus service is not running properly"
        success_msg: "Prometheus service is active and running"

    - name: Wait for Prometheus HTTP endpoint to be ready
      uri:
        url: "http://localhost:9090/-/ready"
        method: GET
        timeout: 10
      register: prometheus_ready_check
      until: prometheus_ready_check.status == 200
      retries: 30
      delay: 10

    - name: Test Prometheus API - targets endpoint
      uri:
        url: "http://localhost:9090/api/v1/targets"
        method: GET
        timeout: 30
      register: targets_response

    - name: Display detailed Prometheus targets information
      debug:
        msg: |
          Prometheus Targets Debug:
          Active targets: {{ targets_response.json.data.activeTargets | length if targets_response.json.data.activeTargets is defined else 0 }}
          
          Target details:
          {% for target in targets_response.json.data.activeTargets %}
          - URL: {{ target.scrapeUrl }}
            Health: {{ target.health }}
            Last Error: {{ target.lastError if target.lastError else 'None' }}
            Last Scrape: {{ target.lastScrape }}
          {% endfor %}

    - name: Verify Prometheus targets are being scraped
      assert:
        that:
          - targets_response.status == 200
          - targets_response.json.status == "success"
          - targets_response.json.data.activeTargets | length >= 3
        fail_msg: "Not enough active targets found"
        success_msg: "All expected targets are active"

    - name: Check if AlertManager service is running
      systemd:
        name: alertmanager
      register: alertmanager_service

    - name: Verify AlertManager service is active
      assert:
        that:
          - alertmanager_service.status.ActiveState == "active"
          - alertmanager_service.status.SubState == "running"
        fail_msg: "AlertManager service is not running properly"
        success_msg: "AlertManager service is active and running"

    - name: Test AlertManager API
      uri:
        url: "http://localhost:9093/api/v2/status"
        method: GET
        timeout: 30
      register: alertmanager_status
      retries: 10
      delay: 5

    - name: Verify AlertManager is responding
      assert:
        that:
          - alertmanager_status.status == 200
        fail_msg: "AlertManager API not responding"
        success_msg: "AlertManager API is responding"

    - name: Check if Grafana service is running
      systemd:
        name: grafana-server
      register: grafana_service

    - name: Verify Grafana service is active
      assert:
        that:
          - grafana_service.status.ActiveState == "active"
          - grafana_service.status.SubState == "running"
        fail_msg: "Grafana service is not running properly"
        success_msg: "Grafana service is active and running"

    - name: Test Grafana health endpoint
      uri:
        url: "http://localhost:3000/api/health"
        method: GET
        timeout: 30
      register: grafana_health
      retries: 15
      delay: 10

    - name: Verify Grafana is responding
      assert:
        that:
          - grafana_health.status == 200
          - grafana_health.json.database == "ok"
        fail_msg: "Grafana health check failed"
        success_msg: "Grafana is healthy"

    - name: Check node exporter service on monitoring server
      systemd:
        name: node_exporter
      register: node_exporter_service

    - name: Verify node exporter is running
      assert:
        that:
          - node_exporter_service.status.ActiveState == "active"
          - node_exporter_service.status.SubState == "running"
        fail_msg: "Node exporter service is not running"
        success_msg: "Node exporter service is running"

    - name: Test node exporter metrics
      uri:
        url: "http://localhost:9100/metrics"
        method: GET
      register: node_metrics

    - name: Verify node exporter metrics
      assert:
        that:
          - node_metrics.status == 200
          - "'node_cpu_seconds_total' in node_metrics.content"
          - "'node_memory_MemTotal_bytes' in node_metrics.content"
        fail_msg: "Node exporter metrics not available"
        success_msg: "Node exporter metrics are available"

# =============================================================================
# Database Server Verification with Enhanced postgres_exporter Debugging
# =============================================================================
- name: Verify database server components
  hosts: database_server
  become: true
  tasks:
    - name: Check if PostgreSQL service is running
      systemd:
        name: postgresql
      register: postgresql_service

    - name: Verify PostgreSQL service is active
      assert:
        that:
          - postgresql_service.status.ActiveState == "active"
          - postgresql_service.status.SubState == "running"
        fail_msg: "PostgreSQL service is not running properly"
        success_msg: "PostgreSQL service is active and running"

    - name: Test PostgreSQL connection
      postgresql_ping:
        db: postgres
        login_user: postgres
      become_user: postgres
      register: postgres_connection

    - name: Verify PostgreSQL is accepting connections
      assert:
        that:
          - postgres_connection is not failed
        fail_msg: "Cannot connect to PostgreSQL"
        success_msg: "PostgreSQL is accepting connections"

    - name: Check if test database exists
      postgresql_query:
        db: postgres
        login_user: postgres
        query: "SELECT 1 FROM pg_database WHERE datname='testdb'"
      become_user: postgres
      register: testdb_exists

    - name: Verify test database was created
      assert:
        that:
          - testdb_exists.rowcount == 1
        fail_msg: "Test database was not created"
        success_msg: "Test database exists"

    - name: Check if postgres_exporter user exists
      postgresql_query:
        db: postgres
        login_user: postgres
        query: "SELECT 1 FROM pg_user WHERE usename='postgres_exporter'"
      become_user: postgres
      register: exporter_user_exists

    - name: Verify postgres_exporter user was created
      assert:
        that:
          - exporter_user_exists.rowcount == 1
        fail_msg: "Postgres exporter user was not created"
        success_msg: "Postgres exporter user exists"

    # =============================================================================
    # Enhanced postgres_exporter debugging section
    # =============================================================================
    - name: Check if postgres_exporter service is running
      systemd:
        name: postgres_exporter
      register: postgres_exporter_service

    - name: Display detailed postgres_exporter service status
      debug:
        msg: |
          Postgres Exporter Service Status:
          - Active: {{ postgres_exporter_service.status.ActiveState }}
          - SubState: {{ postgres_exporter_service.status.SubState }}
          - Main PID: {{ postgres_exporter_service.status.MainPID }}
          - Load State: {{ postgres_exporter_service.status.LoadState }}
          - Result: {{ postgres_exporter_service.status.Result }}

    - name: Check postgres_exporter logs if service is not running properly
      command: journalctl -u postgres_exporter --no-pager -n 30
      register: pg_exporter_logs
      when: postgres_exporter_service.status.ActiveState != "active"

    - name: Display postgres_exporter logs if service failed
      debug:
        msg: "Postgres exporter logs: {{ pg_exporter_logs.stdout_lines }}"
      when: postgres_exporter_service.status.ActiveState != "active"

    - name: Check if postgres_exporter port is listening
      command: netstat -tlnp | grep 9187
      register: port_check
      ignore_errors: true

    - name: Display port listening status
      debug:
        msg: "Port 9187 status: {{ port_check.stdout_lines if port_check.stdout_lines else 'Not listening' }}"

    - name: Test PostgreSQL connection as postgres_exporter user
      postgresql_query:
        db: postgres
        login_user: postgres_exporter
        login_password: "{{ vault_exporter_password }}"
        login_host: localhost
        query: "SELECT 1 as test"
      register: pg_exporter_connection_test
      ignore_errors: true

    - name: Display postgres_exporter database connection test
      debug:
        msg: |
          Database connection test: {{ 'SUCCESS' if pg_exporter_connection_test is not failed else 'FAILED' }}
          Result: {{ pg_exporter_connection_test.query_result if pg_exporter_connection_test.query_result is defined else pg_exporter_connection_test.msg }}

    - name: Test postgres_exporter metrics endpoint
      uri:
        url: "http://localhost:9187/metrics"
        method: GET
        timeout: 30
      register: postgres_metrics
      retries: 3
      delay: 5
      ignore_errors: true

    - name: Display postgres_exporter metrics test results
      debug:
        msg: |
          Metrics endpoint test: {{ 'SUCCESS' if postgres_metrics.status == 200 else 'FAILED' }}
          Status code: {{ postgres_metrics.status | default('No response') }}
          {% if postgres_metrics.status == 200 %}
          pg_up found: {{ 'pg_up' in postgres_metrics.content }}
          Content preview: {{ postgres_metrics.content[:300] }}
          {% else %}
          Error: {{ postgres_metrics.msg | default('Unknown error') }}
          {% endif %}

    # Only assert if service is actually running
    - name: Verify postgres_exporter service is active (conditional)
      assert:
        that:
          - postgres_exporter_service.status.ActiveState == "active"
          - postgres_exporter_service.status.SubState == "running"
        fail_msg: "Postgres exporter service is not running properly"
        success_msg: "Postgres exporter service is active and running"
      when: postgres_exporter_service.status.ActiveState == "active"

    # Only assert metrics if service is running and endpoint responds
    - name: Verify postgres_exporter metrics (conditional)
      assert:
        that:
          - postgres_metrics.status == 200
          - "'pg_up' in postgres_metrics.content"
          - "'pg_stat_database_numbackends' in postgres_metrics.content"
        fail_msg: "Postgres exporter metrics not available"
        success_msg: "Postgres exporter metrics are available"
      when: postgres_exporter_service.status.ActiveState == "active" and postgres_metrics.status == 200

    - name: Check node exporter service on database server
      systemd:
        name: node_exporter
      register: db_node_exporter_service

    - name: Verify node exporter is running on database server
      assert:
        that:
          - db_node_exporter_service.status.ActiveState == "active"
          - db_node_exporter_service.status.SubState == "running"
        fail_msg: "Node exporter service is not running on database server"
        success_msg: "Node exporter service is running on database server"

# =============================================================================
# Cross-Server Integration Verification
# =============================================================================
- name: Verify cross-server monitoring integration
  hosts: monitoring_server
  become: true
  tasks:
    - name: Test connectivity to postgres_exporter from monitoring server
      uri:
        url: "http://postgres-server:9187/metrics"
        method: GET
        timeout: 10
      register: remote_pg_metrics_test
      ignore_errors: true

    - name: Display remote postgres_exporter connectivity
      debug:
        msg: |
          Remote postgres_exporter test: {{ 'SUCCESS' if remote_pg_metrics_test.status == 200 else 'FAILED' }}
          Status: {{ remote_pg_metrics_test.status | default('Connection failed') }}
          {% if remote_pg_metrics_test.status == 200 %}
          Metrics found: {{ 'pg_up' in remote_pg_metrics_test.content }}
          {% endif %}

    - name: Query PostgreSQL metrics from Prometheus
      uri:
        url: "http://localhost:9090/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "pg_up"
      register: pg_up_query
      retries: 10
      delay: 15

    - name: Display Prometheus PostgreSQL query results
      debug:
        msg: |
          Prometheus pg_up query:
          Status: {{ pg_up_query.json.status if pg_up_query.json is defined else 'Failed' }}
          Results: {{ pg_up_query.json.data.result | length if pg_up_query.json.data.result is defined else 0 }}
          {% if pg_up_query.json.data.result is defined and pg_up_query.json.data.result | length > 0 %}
          Value: {{ pg_up_query.json.data.result[0].value[1] }}
          {% endif %}

    - name: Verify PostgreSQL metrics are being collected (conditional)
      assert:
        that:
          - pg_up_query.status == 200
          - pg_up_query.json.status == "success"
          - pg_up_query.json.data.result | length >= 1
          - pg_up_query.json.data.result[0].value[1] == "1"
        fail_msg: "PostgreSQL metrics not being collected by Prometheus"
        success_msg: "PostgreSQL metrics are being collected successfully"
      when: remote_pg_metrics_test.status == 200

    - name: Query node metrics from both servers
      uri:
        url: "http://localhost:9090/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "up{job='node'}"
      register: node_up_query

    - name: Verify node metrics from both servers
      assert:
        that:
          - node_up_query.status == 200
          - node_up_query.json.status == "success"
          - node_up_query.json.data.result | length >= 2
        fail_msg: "Node metrics not being collected from both servers"
        success_msg: "Node metrics are being collected from both servers"

    - name: Test specific PostgreSQL database metrics
      uri:
        url: "http://localhost:9090/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "pg_stat_database_numbackends{datname='testdb'}"
      register: testdb_metrics

    - name: Verify test database specific metrics
      assert:
        that:
          - testdb_metrics.status == 200
          - testdb_metrics.json.status == "success"
        fail_msg: "Test database metrics not available"
        success_msg: "Test database metrics are available"

    - name: Check alert rules are loaded
      uri:
        url: "http://localhost:9090/api/v1/rules"
        method: GET
      register: rules_response

    - name: Verify alert rules are configured
      assert:
        that:
          - rules_response.status == 200
          - rules_response.json.status == "success"
          - rules_response.json.data.groups | length >= 1
        fail_msg: "Alert rules not loaded properly"
        success_msg: "Alert rules are loaded and configured"

    - name: Display monitoring stack summary
      debug:
        msg: |
          Monitoring Stack Verification Summary:
          - Prometheus: Running and collecting metrics
          - AlertManager: Running and configured
          - Grafana: Running and healthy
          - PostgreSQL: Running with test database
          - Postgres Exporter: {{ 'Running and exposing metrics' if remote_pg_metrics_test.status == 200 else 'NOT WORKING - check logs above' }}
          - Node Exporters: Running on both servers
          - Cross-server metrics: {{ 'Successfully collected' if remote_pg_metrics_test.status == 200 else 'FAILED - postgres_exporter not accessible' }}
          - Alert rules: Loaded and configured