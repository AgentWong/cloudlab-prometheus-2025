---
# =============================================================================
# Monitoring Server Configuration
# =============================================================================
- name: Configure monitoring server
  hosts: monitoring_server
  become: true
  vars:
    # Prometheus configuration
    prometheus_scrape_configs:
      - job_name: "prometheus"
        static_configs:
          - targets:
              - "localhost:9090"
      - job_name: "node"
        static_configs:
          - targets:
              - "monitoring-server:9100"
              - "postgres-server:9100"
      - job_name: "postgres"
        static_configs:
          - targets:
              - "postgres-server:9187"
    
    prometheus_rule_files:
      - "alert_rules.yml"
    
    prometheus_alert_rules:
      - alert: InstanceDown
        expr: up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "{% raw %}Instance {{ $labels.instance }} is down{% endraw %}"
          description: "{% raw %}{{ $labels.instance }} has been down for more than 2 minutes{% endraw %}"
      
      - alert: PostgreSQLDown
        expr: pg_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL is down"
          description: "{% raw %}PostgreSQL on {{ $labels.instance }} is not responding{% endraw %}"
      
      - alert: HighCPUUsage
        expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "{% raw %}CPU usage is above 80% on {{ $labels.instance }}{% endraw %}"

    # AlertManager configuration - Fixed structure
    alertmanager_route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    
    alertmanager_receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://127.0.0.1:5001/'

  roles:
    - prometheus.prometheus.prometheus
    - prometheus.prometheus.alertmanager
    - prometheus.prometheus.node_exporter
  
  tasks:
    # Install required packages for GPG key handling
    - name: Install GPG and related packages
      package:
        name:
          - gnupg
          - software-properties-common
        state: present
      when: ansible_os_family == "Debian"
    
    # Install Grafana repository and package
    - name: Add Grafana GPG key
      apt_key:
        url: https://apt.grafana.com/gpg.key
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Add Grafana repository
      apt_repository:
        repo: "deb https://apt.grafana.com stable main"
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Update apt cache
      apt:
        update_cache: true
      when: ansible_os_family == "Debian"
    
    - name: Install Grafana
      package:
        name: grafana
        state: present
    
    - name: Configure Grafana admin password
      ini_file:
        path: /etc/grafana/grafana.ini
        section: security
        option: admin_password
        value: admin123
        backup: true
      notify: restart grafana
    
    - name: Configure Grafana to listen on all interfaces
      ini_file:
        path: /etc/grafana/grafana.ini
        section: server
        option: http_addr
        value: "0.0.0.0"
        backup: true
      notify: restart grafana
    
    - name: Start and enable Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: true
  
  handlers:
    - name: restart grafana
      systemd:
        name: grafana-server
        state: restarted

# =============================================================================
# Database Server Configuration
# =============================================================================
- name: Configure database server
  hosts: database_server
  become: true
  vars:
    # PostgreSQL configuration
    postgresql_version: "12"
    postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
    postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
    postgresql_config_path: "/etc/postgresql/{{ postgresql_version }}/main"
    
    postgresql_databases:
      - name: testdb
        encoding: UTF-8
        locale: en_US.UTF-8
        template: template0
    
    postgresql_users:
      - name: testuser
        password: "{{ vault_postgres_password }}"
        db: testdb
        priv: ALL
      - name: postgres_exporter
        password: "{{ vault_exporter_password }}"
        db: postgres
        priv: CONNECT
        role_attr_flags: NOSUPERUSER,NOCREATEDB,NOCREATEROLE
    
    postgresql_hba_entries:
      - { type: local, database: all, user: postgres, auth_method: peer }
      - { type: local, database: all, user: all, auth_method: peer }
      - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5 }
      - { type: host, database: all, user: all, address: '::1/128', auth_method: md5 }
      - { type: host, database: all, user: all, address: '0.0.0.0/0', auth_method: md5 }
    
    postgresql_global_config_options:
      - option: listen_addresses
        value: '*'
      - option: port
        value: 5432
      - option: max_connections
        value: 100
      - option: shared_buffers
        value: 128MB
      - option: log_destination
        value: 'stderr'
      - option: logging_collector
        value: 'on'
      - option: log_directory
        value: 'pg_log'
      - option: log_filename
        value: 'postgresql-%Y-%m-%d_%H%M%S.log'

    # Postgres Exporter configuration
    postgres_exporter_configuration:
      data_source_name: "postgresql://postgres_exporter:{{ vault_exporter_password }}@localhost:5432/postgres?sslmode=disable"
    
    postgres_exporter_web_listen_address: "0.0.0.0:9187"

  roles:
    - geerlingguy.postgresql
    - prometheus.prometheus.postgres_exporter
    - prometheus.prometheus.node_exporter