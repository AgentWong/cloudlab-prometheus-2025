---
# =============================================================================
# Monitoring Server Configuration (keeping existing manual Grafana install)
# =============================================================================
- name: Configure monitoring server
  hosts: monitoring_server
  become: true
  vars:
    # Prometheus configuration
    prometheus_scrape_configs:
      - job_name: "prometheus"
        static_configs:
          - targets:
              - "localhost:9090"
      - job_name: "node"
        static_configs:
          - targets:
              - "monitoring-server:9100"
              - "postgres-server:9100"
      - job_name: "postgres"
        static_configs:
          - targets:
              - "postgres-server:9187"
    
    prometheus_rule_files:
      - "alert_rules.yml"
    
    prometheus_alert_rules:
      - alert: InstanceDown
        expr: up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "{% raw %}Instance {{ $labels.instance }} is down{% endraw %}"
          description: "{% raw %}{{ $labels.instance }} has been down for more than 2 minutes{% endraw %}"
      
      - alert: PostgreSQLDown
        expr: pg_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL is down"
          description: "{% raw %}PostgreSQL on {{ $labels.instance }} is not responding{% endraw %}"
      
      - alert: HighCPUUsage
        expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "{% raw %}CPU usage is above 80% on {{ $labels.instance }}{% endraw %}"

    # AlertManager configuration
    alertmanager_route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    
    alertmanager_receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://127.0.0.1:5001/'

  roles:
    - prometheus.prometheus.prometheus
    - prometheus.prometheus.alertmanager
    - prometheus.prometheus.node_exporter
  
  tasks:
    # Install required packages for GPG key handling
    - name: Install GPG and related packages
      package:
        name:
          - gnupg
          - software-properties-common
        state: present
      when: ansible_os_family == "Debian"
    
    # Install Grafana repository and package (keeping existing manual setup)
    - name: Add Grafana GPG key
      apt_key:
        url: https://apt.grafana.com/gpg.key
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Add Grafana repository
      apt_repository:
        repo: "deb https://apt.grafana.com stable main"
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Update apt cache
      apt:
        update_cache: true
      when: ansible_os_family == "Debian"
    
    - name: Install Grafana
      package:
        name: grafana
        state: present
    
    - name: Configure Grafana admin password
      ini_file:
        path: /etc/grafana/grafana.ini
        section: security
        option: admin_password
        value: "{{ vault_grafana_password }}"
        backup: true
      notify: restart grafana
    
    - name: Configure Grafana to listen on all interfaces
      ini_file:
        path: /etc/grafana/grafana.ini
        section: server
        option: http_addr
        value: "0.0.0.0"
        backup: true
      notify: restart grafana
    
    - name: Start and enable Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: true

    # Wait for Grafana to be ready before API calls
    - name: Wait for Grafana to be ready
      uri:
        url: "http://localhost:3000/api/health"
        method: GET
        timeout: 30
      register: grafana_health
      until: grafana_health.status == 200
      retries: 30
      delay: 10

    # Create Prometheus datasource using community.grafana
    - name: Create Prometheus datasource
      community.grafana.grafana_datasource:
        name: "Prometheus"
        grafana_url: "http://localhost:3000"
        grafana_user: "admin"
        grafana_password: "{{ vault_grafana_password }}"
        org_id: 1
        ds_type: "prometheus"
        ds_url: "http://localhost:9090"
        access: "proxy"
        is_default: true
      register: prometheus_datasource_result

    - name: Display datasource creation result
      debug:
        msg: "Prometheus datasource: {{ prometheus_datasource_result.msg }}"

    # Import PostgreSQL Database dashboard (ID 9628)
    - name: Import PostgreSQL Database dashboard
      community.grafana.grafana_dashboard:
        grafana_url: "http://localhost:3000"
        grafana_user: "admin" 
        grafana_password: "{{ vault_grafana_password }}"
        dashboard_id: "9628"
        dashboard_revision: "7"
        overwrite: true
        state: present
      register: postgres_dashboard_result

    - name: Display dashboard import result
      debug:
        msg: "PostgreSQL dashboard: {{ postgres_dashboard_result.msg }}"

    # Import Node Exporter Full dashboard (ID 1860) 
    - name: Import Node Exporter Full dashboard
      community.grafana.grafana_dashboard:
        grafana_url: "http://localhost:3000"
        grafana_user: "admin"
        grafana_password: "{{ vault_grafana_password }}"
        dashboard_id: "1860"
        dashboard_revision: "37"
        overwrite: true
        state: present
      register: node_dashboard_result

    - name: Display Node Exporter dashboard import result
      debug:
        msg: "Node Exporter dashboard: {{ node_dashboard_result.msg }}"
  handlers:
    - name: restart grafana
      systemd:
        name: grafana-server
        state: restarted

# =============================================================================
# Database Server Configuration
# =============================================================================
- name: Configure database server
  hosts: database_server
  become: true
  vars:
    # PostgreSQL configuration
    postgresql_version: "12"
    postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
    postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
    postgresql_config_path: "/etc/postgresql/{{ postgresql_version }}/main"
    
    postgresql_databases:
      - name: testdb
        encoding: UTF-8
        locale: en_US.UTF-8
        template: template0
    
    postgresql_users:
      - name: testuser
        password: "{{ vault_postgres_password }}"
      - name: pgexporter
        password: "{{ vault_exporter_password }}"
        role_attr_flags: NOSUPERUSER,NOCREATEDB,NOCREATEROLE

    postgresql_user_privileges:
      - name: testuser
        db: testdb
        priv: ALL
      - name: pgexporter
        db: postgres
        priv: CONNECT
      - name: pgexporter
        db: testdb
        priv: CONNECT
        
    postgresql_hba_entries:
      - { type: local, database: all, user: postgres, auth_method: peer }
      - { type: local, database: all, user: all, auth_method: peer }
      - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5 }
      - { type: host, database: all, user: all, address: '::1/128', auth_method: md5 }
      - { type: host, database: all, user: all, address: '0.0.0.0/0', auth_method: md5 }
    
    postgresql_global_config_options:
      - option: listen_addresses
        value: '*'
      - option: port
        value: 5432
      - option: max_connections
        value: 100
      - option: shared_buffers
        value: 128MB
      - option: log_destination
        value: 'stderr'
      - option: logging_collector
        value: 'on'
      - option: log_directory
        value: 'pg_log'
      - option: log_filename
        value: 'postgresql-%Y-%m-%d_%H%M%S.log'

    postgres_exporter_web_listen_address: "0.0.0.0:9187"
    postgres_exporter_system_user: pgexporter

  roles:
    - geerlingguy.postgresql
    - prometheus.prometheus.postgres_exporter
    - prometheus.prometheus.node_exporter
  
  post_tasks:
    # Wait for PostgreSQL to be fully ready
    - name: Wait for PostgreSQL to be ready
      postgresql_ping:
        db: postgres
        login_user: postgres
      become_user: postgres
      retries: 10
      delay: 5

    # Create sample data and maintain database activity
    - name: Create sample table in test database
      postgresql_query:
        db: testdb
        login_user: postgres
        query: |
          CREATE TABLE IF NOT EXISTS sample_data (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            value INTEGER
          );
      become_user: postgres

    - name: Insert sample data
      postgresql_query:
        db: testdb
        login_user: postgres
        query: |
          INSERT INTO sample_data (name, value) 
          SELECT 
            'test_record_' || generate_series(1, 100),
            (random() * 1000)::integer
          ON CONFLICT DO NOTHING;
      become_user: postgres

    # Grant comprehensive permissions to pgexporter
    - name: Grant basic permissions to pgexporter
      postgresql_query:
        db: postgres
        login_user: postgres
        query: |
          GRANT CONNECT ON DATABASE postgres TO pgexporter;
          GRANT CONNECT ON DATABASE testdb TO pgexporter;
      become_user: postgres

    - name: Grant schema usage permissions
      postgresql_query:
        db: postgres
        login_user: postgres
        query: |
          GRANT USAGE ON SCHEMA public TO pgexporter;
          GRANT USAGE ON SCHEMA information_schema TO pgexporter;
      become_user: postgres

    - name: Grant select permissions on system tables
      postgresql_query:
        db: postgres
        login_user: postgres
        query: |
          GRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO pgexporter;
          GRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO pgexporter;
      become_user: postgres

    # Grant permissions on testdb specifically
    - name: Grant pgexporter permissions on testdb
      postgresql_query:
        db: testdb
        login_user: postgres
        query: |
          GRANT USAGE ON SCHEMA public TO pgexporter;
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO pgexporter;
          GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO pgexporter;
      become_user: postgres

    # Verify pgexporter can connect
    - name: Test pgexporter connection to postgres database
      postgresql_query:
        db: postgres
        login_user: pgexporter
        login_password: "{{ vault_exporter_password }}"
        login_host: localhost
        query: "SELECT 1 as connection_test"
      register: pg_exporter_postgres_test

    - name: Display pgexporter postgres connection test
      debug:
        msg: "pgexporter connection to postgres DB: {{ 'SUCCESS' if pg_exporter_postgres_test is not failed else 'FAILED' }}"

    # Test testdb connection
    - name: Test pgexporter connection to testdb
      postgresql_query:
        db: testdb
        login_user: pgexporter
        login_password: "{{ vault_exporter_password }}"
        login_host: localhost
        query: "SELECT count(*) as record_count FROM sample_data"
      register: pg_exporter_testdb_test

    - name: Display pgexporter testdb connection test
      debug:
        msg: "pgexporter connection to testdb: {{ 'SUCCESS' if pg_exporter_testdb_test is not failed else 'FAILED' }}"

    # Restart postgres_exporter to pick up configuration
    - name: Restart postgres_exporter service
      systemd:
        name: postgres_exporter
        state: restarted
      when: pg_exporter_postgres_test is not failed

    # Wait for postgres_exporter to start collecting metrics
    - name: Wait for postgres_exporter to initialize
      pause:
        seconds: 15

    # Create a background activity script to keep database active
    - name: Create database activity script
      copy:
        dest: /usr/local/bin/db_activity.sh
        mode: '0755'
        content: |
          #!/bin/bash
          while true; do
            # Connect to both databases and perform light activity
            sudo -u postgres psql -d testdb -c "SELECT count(*) FROM sample_data;" > /dev/null 2>&1
            sudo -u postgres psql -d postgres -c "SELECT datname FROM pg_database;" > /dev/null 2>&1
            
            # Test pgexporter user connectivity
            PGPASSWORD="{{ vault_exporter_password }}" psql -h localhost -U pgexporter -d postgres -c "SELECT 1;" > /dev/null 2>&1
            
            sleep 30
          done

    - name: Create systemd service for database activity
      copy:
        dest: /etc/systemd/system/db-activity.service
        content: |
          [Unit]
          Description=Database Activity Generator
          After=postgresql.service postgres_exporter.service
          Requires=postgresql.service

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/db_activity.sh
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target

    - name: Start and enable database activity service
      systemd:
        name: db-activity
        state: started
        enabled: true
        daemon_reload: true