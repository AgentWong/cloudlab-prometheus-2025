# =============================================================================
# molecule/default/verify.yml - Verification tests
# =============================================================================

---
- name: Verify
  hosts: all
  become: true
  tasks:
    - name: Check if prometheus service is running
      systemd:
        name: prometheus
      register: prometheus_service

    - name: Verify prometheus service is active
      assert:
        that:
          - prometheus_service.status.ActiveState == "active"
          - prometheus_service.status.SubState == "running"
        fail_msg: "Prometheus service is not running properly"
        success_msg: "Prometheus service is active and running"

    - name: Check prometheus service status details
      command: systemctl status prometheus --no-pager -l
      register: service_status
      changed_when: false

    - name: Display service status
      debug:
        var: service_status.stdout_lines

    - name: Check prometheus binary exists and is executable
      stat:
        path: /usr/local/bin/prometheus
      register: prometheus_binary

    - name: Verify prometheus binary
      assert:
        that:
          - prometheus_binary.stat.exists
          - prometheus_binary.stat.executable
        fail_msg: "Prometheus binary is missing or not executable"

    - name: Check promtool binary exists and is executable
      stat:
        path: /usr/local/bin/promtool
      register: promtool_binary

    - name: Verify promtool binary
      assert:
        that:
          - promtool_binary.stat.exists
          - promtool_binary.stat.executable
        fail_msg: "Promtool binary is missing or not executable"

    - name: Check prometheus configuration file
      stat:
        path: /etc/prometheus/prometheus.yml
      register: prometheus_config

    - name: Verify prometheus configuration
      assert:
        that:
          - prometheus_config.stat.exists
          - prometheus_config.stat.size > 0
        fail_msg: "Prometheus configuration file is missing or empty"

    - name: Validate prometheus configuration syntax
      command: /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml
      register: config_validation
      changed_when: false

    - name: Display configuration validation result
      debug:
        var: config_validation

    - name: Verify configuration is valid
      assert:
        that:
          - config_validation.rc == 0
          - "'SUCCESS' in config_validation.stdout"
        fail_msg: "Prometheus configuration validation failed: {{ config_validation.stderr }}"
        success_msg: "Prometheus configuration is valid"

    - name: Check prometheus data directory
      stat:
        path: /var/lib/prometheus
      register: prometheus_data_dir

    - name: Verify data directory permissions
      assert:
        that:
          - prometheus_data_dir.stat.exists
          - prometheus_data_dir.stat.isdir
          - prometheus_data_dir.stat.pw_name == "prometheus"
          - prometheus_data_dir.stat.gr_name == "prometheus"
        fail_msg: "Prometheus data directory has incorrect permissions"

    - name: Wait for Prometheus HTTP endpoint to be ready
      uri:
        url: "http://localhost:9090/-/ready"
        method: GET
        timeout: 10
      register: prometheus_ready_check
      until: prometheus_ready_check.status == 200
      retries: 12
      delay: 10

    - name: Test prometheus API - config endpoint
      uri:
        url: "http://localhost:9090/api/v1/status/config"
        method: GET
        timeout: 30
      register: config_api_response

    - name: Verify API config response
      assert:
        that:
          - config_api_response.status == 200
          - config_api_response.json.status == "success"
        fail_msg: "Prometheus config API not responding correctly"

    - name: Test prometheus API - build info
      uri:
        url: "http://localhost:9090/api/v1/status/buildinfo"
        method: GET
      register: buildinfo_response

    - name: Verify build info contains expected version
      assert:
        that:
          - buildinfo_response.status == 200
          - "'version' in buildinfo_response.json.data"
        fail_msg: "Build info API not returning expected data"

    - name: Display Prometheus version
      debug:
        msg: "Prometheus version: {{ buildinfo_response.json.data.version }}"

    - name: Test prometheus metrics endpoint
      uri:
        url: "http://localhost:9090/metrics"
        method: GET
      register: metrics_response

    - name: Verify metrics endpoint
      assert:
        that:
          - metrics_response.status == 200
          - "'prometheus_build_info' in metrics_response.content"
          - "'prometheus_config_last_reload_successful' in metrics_response.content"
        fail_msg: "Metrics endpoint not returning expected metrics"

    - name: Test prometheus query API
      uri:
        url: "http://localhost:9090/api/v1/query"
        method: GET
        body_format: form-urlencoded
        body:
          query: "up"
      register: query_response

    - name: Verify query functionality
      assert:
        that:
          - query_response.status == 200
          - query_response.json.status == "success"
          - query_response.json.data.result | length >= 1
        fail_msg: "Prometheus query API not working correctly"

    - name: Test prometheus targets API
      uri:
        url: "http://localhost:9090/api/v1/targets"
        method: GET
      register: targets_response

    - name: Verify targets are being scraped
      assert:
        that:
          - targets_response.status == 200
          - targets_response.json.status == "success"
          - targets_response.json.data.activeTargets | length >= 1
        fail_msg: "No active targets found"

    - name: Check for healthy targets
      debug:
        msg: "Found {{ targets_response.json.data.activeTargets | selectattr('health', 'equalto', 'up') | list | length }} healthy targets"

    - name: Test alert rules API
      uri:
        url: "http://localhost:9090/api/v1/rules"
        method: GET
      register: rules_response

    - name: Verify alert rules are loaded
      assert:
        that:
          - rules_response.status == 200
          - rules_response.json.status == "success"
        fail_msg: "Alert rules API not responding correctly"

    - name: Display rules summary
      debug:
        msg: "Loaded {{ rules_response.json.data.groups | length }} rule groups"

    - name: Check prometheus log for errors
      command: journalctl -u prometheus --no-pager -n 50
      register: prometheus_logs
      changed_when: false

    - name: Display recent logs
      debug:
        var: prometheus_logs.stdout_lines
      when: prometheus_logs.stdout_lines | length > 0

    - name: Check for critical errors in logs
      assert:
        that:
          - "'panic' not in prometheus_logs.stdout"
          - "'fatal' not in prometheus_logs.stdout"
        fail_msg: "Found critical errors in Prometheus logs"
        success_msg: "No critical errors found in Prometheus logs"